{"version":3,"sources":["components/Contact/Contact.module.css","components/Menu/Menu.module.css","components/Footer/Footer.module.css","components/Header/Header.module.css","components/SubMenu/Submenu.module.css","components/Main/Main.module.css","components/Header/Header.jsx","components/SubMenu/Submenu.jsx","components/Menu/Menu.jsx","components/Main/Main.jsx","components/Contact/Contact.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","s","header","Submenu","capture","submenu","Menu","menu","pages","map","gen","Main","main","Contact","img","url","contact","href","a","src","alt","Footer","footer","foot","cont","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0EACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,IAAM,qBAAqB,EAAI,mBAAmB,QAAU,2B,gBCAjHD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,sB,gBCApDD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,OAAS,yB,kBCAvDD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,2B,oSCA5BD,EAAOC,QAAU,CAAC,KAAO,qB,q1BCUVC,EARA,WACX,OACI,4BAAQC,UAAWC,IAAEC,QACjB,uG,gCCKGC,EARC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,OACI,4BAAQJ,UAAWC,IAAEI,SACjB,6BAAMD,K,OCWHE,EAZF,WACT,OACI,yBAAKN,UAAWC,IAAEM,MACd,yBAAKP,UAAWC,IAAEO,OACbA,EAAMC,KAAI,SAACC,GAAD,OACP,kBAAC,EAAYA,S,gBCElBC,EATF,WACX,OACE,yBAAKX,UAAWC,IAAEW,MAAlB,S,gCCDSC,EAAU,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,IAAKV,EAAmB,EAAnBA,QAASW,EAAU,EAAVA,IACtC,OACE,yBAAKf,UAAWC,IAAEe,SACd,uBAAGC,KAAMF,EAAKf,UAAWC,IAAEiB,GACzB,yBAAKC,IAAKL,EAAKM,IAAI,GAAGpB,UAAWC,IAAEa,MACnC,yBAAKd,UAAWC,IAAEG,SACfA,M,QCOEiB,EAZA,WACb,OACE,yBAAKrB,UAAWC,IAAEqB,QAChB,yBAAKtB,UAAWC,IAAEsB,MACfC,EAAKf,KAAI,SAACC,GAAD,OACR,kBAAC,EAAYA,SCSRe,EAXH,WACV,OACE,yBAAKzB,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e349ab7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__3R3Z5\",\"img\":\"Contact_img__1pzKR\",\"a\":\"Contact_a__1gdvl\",\"capture\":\"Contact_capture__L6bGb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__17ubL\",\"pages\":\"Menu_pages__wr5oj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"foot\":\"Footer_foot__3a4mX\",\"footer\":\"Footer_footer__3yxF-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1kuL2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submenu\":\"Submenu_submenu__rHqcT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__7hYhT\"};","import React from 'react';\r\nimport s from './Header.module.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div>Отдых на дону</div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from './Submenu.module.css'\r\n\r\nconst Submenu = ({capture}) => {\r\n    return (\r\n        <button className={s.submenu}>\r\n            <div>{capture}</div>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Submenu;","import React from 'react';\r\nimport s from './Menu.module.css'\r\nimport Submenu from './../SubMenu/Submenu'\r\nimport pages from './pages.json'\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <div className={s.menu}>\r\n            <div className={s.pages}>\r\n                {pages.map((gen) => (\r\n                    <Submenu {...gen} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport s from './Main.module.css'\r\n\r\nconst Main = () => {\r\n  return (\r\n    <div className={s.main}>\r\n    MAIN\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport s from './Contact.module.css'\r\n\r\n\r\nexport const Contact = ({ img, capture, url }) => {\r\n  return (\r\n    <div className={s.contact}>\r\n        <a href={url} className={s.a}>\r\n          <img src={img} alt=\"\" className={s.img}></img>\r\n          <div className={s.capture}>\r\n            {capture}\r\n          </div>\r\n        </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport s from './Footer.module.css'\r\nimport {Contact} from '../Contact/Contact';\r\nimport cont from './contacts.json';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className={s.footer}>\r\n      <div className={s.foot}>\r\n        {cont.map((gen) =>(\r\n          <Contact {...gen} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Menu from './components/Menu/Menu';\r\nimport Main from './components/Main/Main';\r\nimport Footer from './components/Footer/Footer';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app-wrapper\">\r\n      <Header />\r\n      <Menu />\r\n      <Main />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}