{"version":3,"sources":["components/Contact/Contact.module.css","components/Menu/Menu.module.css","components/Footer/Footer.module.css","components/Header/Header.module.css","components/SubMenu/Submenu.module.css","components/Main/Main.module.css","components/Header/Header.jsx","components/SubMenu/Submenu.jsx","components/Menu/Menu.jsx","components/Main/Main.jsx","components/Contact/Contact.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","s","header","Submenu","capture","submenu","Menu","menu","pages","map","gen","Main","main","Contact","img","url","contact","href","a","src","alt","Footer","footer","foot","cont","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0EACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,IAAM,qBAAqB,EAAI,mBAAmB,QAAU,2B,gBCAjHD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,sB,gBCApDD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,OAAS,yB,kBCAvDD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,2B,oSCA5BD,EAAOC,QAAU,CAAC,KAAO,qB,q1BCUVC,EARA,WACX,OACI,4BAAQC,UAAWC,IAAEC,QACjB,uC,gCCKGC,EARC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,OACI,4BAAQJ,UAAWC,IAAEI,SACjB,6BAAMD,K,OCWHE,EAZF,WACT,OACI,yBAAKN,UAAWC,IAAEM,MACd,yBAAKP,UAAWC,IAAEO,OACbA,EAAMC,KAAI,SAACC,GAAD,OACP,kBAAC,EAAYA,S,gBCElBC,EATF,WACX,OACE,yBAAKX,UAAWC,IAAEW,MAAlB,S,gCCDSC,EAAU,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,IAAKV,EAAmB,EAAnBA,QAASW,EAAU,EAAVA,IACtC,OACE,yBAAKf,UAAWC,IAAEe,SACd,uBAAGC,KAAMF,EAAKf,UAAWC,IAAEiB,GACzB,yBAAKC,IAAKL,EAAKM,IAAI,GAAGpB,UAAWC,IAAEa,MACnC,yBAAKd,UAAWC,IAAEG,SACfA,M,QCOEiB,EAZA,WACb,OACE,yBAAKrB,UAAWC,IAAEqB,QAChB,yBAAKtB,UAAWC,IAAEsB,MACfC,EAAKf,KAAI,SAACC,GAAD,OACR,kBAAC,EAAYA,SCSRe,EAXH,WACV,OACE,yBAAKzB,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e5b2ba39.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__3R3Z5\",\"img\":\"Contact_img__1pzKR\",\"a\":\"Contact_a__1gdvl\",\"capture\":\"Contact_capture__L6bGb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__17ubL\",\"pages\":\"Menu_pages__wr5oj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"foot\":\"Footer_foot__3a4mX\",\"footer\":\"Footer_footer__3yxF-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1kuL2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submenu\":\"Submenu_submenu__rHqcT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__7hYhT\"};","import React from 'react';\r\nimport s from './Header.module.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div>HEAD</div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from './Submenu.module.css'\r\n\r\nconst Submenu = ({capture}) => {\r\n    return (\r\n        <button className={s.submenu}>\r\n            <div>{capture}</div>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Submenu;","import React from 'react';\r\nimport s from './Menu.module.css'\r\nimport Submenu from './../SubMenu/Submenu'\r\nimport pages from './pages.json'\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <div className={s.menu}>\r\n            <div className={s.pages}>\r\n                {pages.map((gen) => (\r\n                    <Submenu {...gen} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\nimport s from './Main.module.css'\r\n\r\nconst Main = () => {\r\n  return (\r\n    <div className={s.main}>\r\n    MAIN\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport s from './Contact.module.css'\r\n\r\n\r\nexport const Contact = ({ img, capture, url }) => {\r\n  return (\r\n    <div className={s.contact}>\r\n        <a href={url} className={s.a}>\r\n          <img src={img} alt=\"\" className={s.img}></img>\r\n          <div className={s.capture}>\r\n            {capture}\r\n          </div>\r\n        </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport s from './Footer.module.css'\r\nimport {Contact} from '../Contact/Contact';\r\nimport cont from './contacts.json';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className={s.footer}>\r\n      <div className={s.foot}>\r\n        {cont.map((gen) =>(\r\n          <Contact {...gen} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Menu from './components/Menu/Menu';\nimport Main from './components/Main/Main';\nimport Footer from './components/Footer/Footer';\n\n\nconst App = () => {\n  return (\n    <div className=\"app-wrapper\">\n      <Header />\n      <Menu />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}